{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///Users/darshan.he/temp/sam/frontend/src/styles/ImageGridStyle.ts"],"sourcesContent":["// src/styles/ImageGridStyles.ts\n\nimport styled from 'styled-components';\n\nexport const Grid = styled.div`\n  column-count: 2;\n  column-gap: 10px;\n\n  @media (min-width: 768px) {\n    column-count: 3;\n  }\n\n  @media (min-width: 1024px) {\n    column-count: 4;\n  }\n`;\n\nexport const ImageContainer = styled.div`\n  break-inside: avoid;\n  margin-bottom: 10px;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  position: relative;\n  overflow: hidden;\n  transition: box-shadow 0.3s ease;\n\n  &:hover {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n  }\n`;\n\nexport const Button = styled.button`\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  padding: 5px 10px;\n  background-color: #0070f3;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 2;\n\n  &:hover {\n    background-color: #005bb5;\n  }\n\n  &:disabled {\n    background-color: #aaa;\n    cursor: not-allowed;\n  }\n`;\n\nexport const TagContainer = styled.div`\n  position: absolute;\n  bottom: 10px;\n  left: 10px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n  z-index: 2;\n`;\n\nexport const TagButton = styled.div`\n  background-color: rgba(0, 0, 0, 0.7);\n  color: white;\n  padding: 5px 10px;\n  border-radius: 5px;\n  font-size: 12px;\n`;\n\nexport const StyledImage = styled.img`\n  width: 100%;\n  height: auto;\n  display: block;\n  border-radius: 8px;\n`;\n\nexport const ErrorMessage = styled.p`\n  color: red;\n  text-align: center;\n`;\n"],"names":[],"mappings":"AAAA,gCAAgC;;;;;;;;;;AAEhC;;AAEO,MAAM,OAAO,iIAAA,CAAA,UAAM,CAAC,GAAG,CAAC;;;;;;;;;;;AAW/B,CAAC;AAEM,MAAM,iBAAiB,iIAAA,CAAA,UAAM,CAAC,GAAG,CAAC;;;;;;;;;;;;;AAazC,CAAC;AAEM,MAAM,SAAS,iIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;AAoBpC,CAAC;AAEM,MAAM,eAAe,iIAAA,CAAA,UAAM,CAAC,GAAG,CAAC;;;;;;;;AAQvC,CAAC;AAEM,MAAM,YAAY,iIAAA,CAAA,UAAM,CAAC,GAAG,CAAC;;;;;;AAMpC,CAAC;AAEM,MAAM,cAAc,iIAAA,CAAA,UAAM,CAAC,GAAG,CAAC;;;;;AAKtC,CAAC;AAEM,MAAM,eAAe,iIAAA,CAAA,UAAM,CAAC,CAAC,CAAC;;;AAGrC,CAAC"}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///Users/darshan.he/temp/sam/frontend/src/components/ImageItem.tsx"],"sourcesContent":["// src/components/ImageItem.tsx\n\nimport React from 'react';\nimport { ImageItemProps } from '../types';\nimport { ImageContainer, Button, TagContainer, TagButton, StyledImage } from '../styles/ImageGridStyle';\n\nconst ImageItem: React.FC<ImageItemProps> = ({ image, onAnalyze, tags, isAnalyzed }) => {\n  return (\n    <ImageContainer>\n      <Button\n        onClick={() => onAnalyze(image.url, image.id)}\n        aria-label={`Analyze image ${image.id}`}\n        disabled={isAnalyzed}\n      >\n        {isAnalyzed ? 'Analyzed' : 'Analyze Image'}\n      </Button>\n\n      {tags && (\n        <TagContainer>\n          {tags.map((tag, index) => (\n            <TagButton key={index}>{tag}</TagButton>\n          ))}\n        </TagContainer>\n      )}\n\n      <StyledImage src={image.url} alt={`Image ${image.id}`} />\n    </ImageContainer>\n  );\n};\n\nexport default ImageItem;\n"],"names":[],"mappings":"AAAA,+BAA+B;;;;;AAI/B;;;AAEA,MAAM,YAAsC,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU,EAAE;IACjF,qBACE,qKAAC,wHAAA,CAAA,iBAAc;;0BACb,qKAAC,wHAAA,CAAA,SAAM;gBACL,SAAS,IAAM,UAAU,MAAM,GAAG,EAAE,MAAM,EAAE;gBAC5C,cAAY,CAAC,cAAc,EAAE,MAAM,EAAE,EAAE;gBACvC,UAAU;0BAET,aAAa,aAAa;;;;;;YAG5B,sBACC,qKAAC,wHAAA,CAAA,eAAY;0BACV,KAAK,GAAG,CAAC,CAAC,KAAK,sBACd,qKAAC,wHAAA,CAAA,YAAS;kCAAc;uBAAR;;;;;;;;;;0BAKtB,qKAAC,wHAAA,CAAA,cAAW;gBAAC,KAAK,MAAM,GAAG;gBAAE,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;;;;;;;;;;;;AAG3D;uCAEe"}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":["file:///Users/darshan.he/temp/sam/frontend/src/components/ImageGrid.tsx"],"sourcesContent":["// src/components/ImageGrid.tsx\n\nimport React, { useState, memo } from 'react';\nimport { ImageGridProps } from '../types';\nimport { Grid, ErrorMessage } from '../styles/ImageGridStyle';\nimport ImageItem from './ImageItem';\n\nconst ImageGrid: React.FC<ImageGridProps> = ({ images, onAnalyze }) => {\n  const [imageTags, setImageTags] = useState<{ [key: string]: string[] }>({});\n  const [analyzedImages, setAnalyzedImages] = useState<{ [key: string]: boolean }>({});\n  const [error, setError] = useState<string | null>(null);\n\n  const handleAnalyze = async (url: string, id: string) => {\n    // Prevent re-analyzing images\n    if (analyzedImages[id]) return;\n\n    try {\n      const tags = await onAnalyze(url, id);\n      setImageTags((prev) => ({ ...prev, [id]: tags }));\n      setAnalyzedImages((prev) => ({ ...prev, [id]: true }));\n    } catch (err) {\n      setError('Failed to analyze the image. Please try again.');\n      console.error('Error analyzing image:', err);\n    }\n  };\n\n  return (\n    <>\n      {error && <ErrorMessage>{error}</ErrorMessage>}\n      <Grid>\n        {images.map((image) => (\n          <ImageItem\n            key={image.id}\n            image={image}\n            onAnalyze={handleAnalyze}\n            tags={imageTags[image.id]}\n            isAnalyzed={analyzedImages[image.id]}\n          />\n        ))}\n      </Grid>\n    </>\n  );\n};\n\nexport default memo(ImageGrid); // Wrap with memo for performance optimization\n"],"names":[],"mappings":"AAAA,+BAA+B;;;;;AAE/B;AAEA;AACA;;;;;AAEA,MAAM,YAAsC,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE;IAChE,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAA+B,CAAC;IACzE,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAA8B,CAAC;IAClF,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,MAAM,gBAAgB,OAAO,KAAa;QACxC,8BAA8B;QAC9B,IAAI,cAAc,CAAC,GAAG,EAAE;QAExB,IAAI;YACF,MAAM,OAAO,MAAM,UAAU,KAAK;YAClC,aAAa,CAAC,OAAS,CAAC;oBAAE,GAAG,IAAI;oBAAE,CAAC,GAAG,EAAE;gBAAK,CAAC;YAC/C,kBAAkB,CAAC,OAAS,CAAC;oBAAE,GAAG,IAAI;oBAAE,CAAC,GAAG,EAAE;gBAAK,CAAC;QACtD,EAAE,OAAO,KAAK;YACZ,SAAS;YACT,QAAQ,KAAK,CAAC,0BAA0B;QAC1C;IACF;IAEA,qBACE;;YACG,uBAAS,qKAAC,wHAAA,CAAA,eAAY;0BAAE;;;;;;0BACzB,qKAAC,wHAAA,CAAA,OAAI;0BACF,OAAO,GAAG,CAAC,CAAC,sBACX,qKAAC,wHAAA,CAAA,UAAS;wBAER,OAAO;wBACP,WAAW;wBACX,MAAM,SAAS,CAAC,MAAM,EAAE,CAAC;wBACzB,YAAY,cAAc,CAAC,MAAM,EAAE,CAAC;uBAJ/B,MAAM,EAAE;;;;;;;;;;;;AAUzB;qDAEe,CAAA,GAAA,mGAAA,CAAA,OAAI,AAAD,EAAE;CAAY,8CAA8C"}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///Users/darshan.he/temp/sam/frontend/src/styles/GlobalStyle.ts"],"sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    font-family: 'Arial', sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n`;\n\nexport default GlobalStyle;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,iIAAA,CAAA,oBAAiB,CAAC;;;;;;;;;;;AAWtC,CAAC;uCAEc"}},
    {"offset": {"line": 308, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":["file:///Users/darshan.he/temp/sam/frontend/src/pages/index.tsx"],"sourcesContent":["// frontend/pages/index.tsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport ImageGrid from '../components/ImageGrid';\nimport GlobalStyle from '../styles/GlobalStyle';\nimport { Image } from '../types';\n\nconst Home: React.FC = () => {\n  const [images, setImages] = useState<Image[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Using environment variable for API URL\n  const apiBaseUrl = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:5000/api';\n\n  useEffect(() => {\n    const fetchImages = async () => {\n      try {\n        const response = await axios.get<Image[]>(`${apiBaseUrl}/images`);\n        setImages(response.data);\n      } catch (err) {\n        setError('Failed to fetch images.');\n        console.error('Error fetching images:', err);\n      }\n    };\n\n    fetchImages();\n  }, [apiBaseUrl]);\n\n  const analyzeImage = useCallback(\n    async (url: string, id: string): Promise<string[]> => {\n      try {\n        setLoading(true);\n        setError(null); // Reset error state before new request\n        const response = await axios.post<{ tags: string[] }>(\n          `${apiBaseUrl}/analyze`,\n          { url }\n        );\n        return response.data.tags;\n      } catch (err) {\n        setError('Failed to analyze image.');\n        console.error('Error analyzing image:', err);\n        return [];\n      } finally {\n        setLoading(false);\n      }\n    },\n    [apiBaseUrl]\n  );\n\n  return (\n    <>\n      <GlobalStyle />\n\n      {error && <p className=\"error-message\">{error}</p>}\n      {loading && <p className=\"loading-message\">Analyzing...</p>}\n\n      <ImageGrid images={images} onAnalyze={analyzeImage} />\n    </>\n  );\n};\n\nexport default Home;\n"],"names":[],"mappings":"AAAA,2BAA2B;;;;;AAC3B;AACA;AACA;AACA;;;;;;;;;;AAGA,MAAM,OAAiB;IACrB,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAW,EAAE;IAChD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAW;IAChD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,yCAAyC;IACzC,MAAM,aAAa,QAAQ,GAAG,CAAC,wBAAwB,IAAI;IAE3D,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,cAAc;YAClB,IAAI;gBACF,MAAM,WAAW,MAAM,0GAAA,CAAA,UAAK,CAAC,GAAG,CAAU,GAAG,WAAW,OAAO,CAAC;gBAChE,UAAU,SAAS,IAAI;YACzB,EAAE,OAAO,KAAK;gBACZ,SAAS;gBACT,QAAQ,KAAK,CAAC,0BAA0B;YAC1C;QACF;QAEA;IACF,GAAG;QAAC;KAAW;IAEf,MAAM,eAAe,CAAA,GAAA,mGAAA,CAAA,cAAW,AAAD,EAC7B,OAAO,KAAa;QAClB,IAAI;YACF,WAAW;YACX,SAAS,OAAO,uCAAuC;YACvD,MAAM,WAAW,MAAM,0GAAA,CAAA,UAAK,CAAC,IAAI,CAC/B,GAAG,WAAW,QAAQ,CAAC,EACvB;gBAAE;YAAI;YAER,OAAO,SAAS,IAAI,CAAC,IAAI;QAC3B,EAAE,OAAO,KAAK;YACZ,SAAS;YACT,QAAQ,KAAK,CAAC,0BAA0B;YACxC,OAAO,EAAE;QACX,SAAU;YACR,WAAW;QACb;IACF,GACA;QAAC;KAAW;IAGd,qBACE;;0BACE,qKAAC,qHAAA,CAAA,UAAW;;;;;YAEX,uBAAS,qKAAC;gBAAE,WAAU;0BAAiB;;;;;;YACvC,yBAAW,qKAAC;gBAAE,WAAU;0BAAkB;;;;;;0BAE3C,qKAAC,wHAAA,CAAA,UAAS;gBAAC,QAAQ;gBAAQ,WAAW;;;;;;;;AAG5C;uCAEe"}},
    {"offset": {"line": 405, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}