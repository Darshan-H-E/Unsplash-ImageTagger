{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///Users/darshan.he/temp/sam/frontend/src/components/ImageGrid.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n\ninterface Image {\n  id: string;\n  url: string;\n}\n\ninterface Props {\n  images: Image[];\n  onAnalyze: (url: string, id: string) => Promise<string[]>;\n}\n\nconst Grid = styled.div`\n  column-count: 2;\n  column-gap: 10px;\n\n  @media (min-width: 768px) {\n    column-count: 3;\n  }\n\n  @media (min-width: 1024px) {\n    column-count: 4;\n  }\n`;\n\nconst ImageContainer = styled.div`\n  break-inside: avoid;\n  margin-bottom: 10px;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  position: relative;\n  overflow: hidden;\n  transition: box-shadow 0.3s ease;\n\n  &:hover {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n  }\n`;\n\nconst Button = styled.button`\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  padding: 5px 10px;\n  background-color: #0070f3;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 2;\n\n  &:hover {\n    background-color: #005bb5;\n  }\n`;\n\nconst TagContainer = styled.div`\n  position: absolute;\n  bottom: 10px;\n  left: 10px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n  z-index: 2;\n`;\n\nconst TagButton = styled.div`\n  background-color: rgba(0, 0, 0, 0.7);\n  color: white;\n  padding: 5px 10px;\n  border-radius: 5px;\n  font-size: 12px;\n`;\n\nconst StyledImage = styled.img`\n  width: 100%;\n  height: auto;\n  display: block;\n  border-radius: 8px;\n`;\n\nconst ImageGrid: React.FC<Props> = ({ images, onAnalyze }) => {\n  const [imageTags, setImageTags] = useState<{ [key: string]: string[] }>({});\n  const [analyzedImages, setAnalyzedImages] = useState<Set<string>>(new Set());\n\n  const handleAnalyze = async (url: string, id: string) => {\n    const tags = await onAnalyze(url, id);\n    setImageTags((prev) => ({ ...prev, [id]: tags }));\n    setAnalyzedImages((prev) => new Set(prev).add(id));\n  };\n\n  return (\n    <Grid>\n      {images.map((image) => (\n        <ImageContainer key={image.id}>\n          {!analyzedImages.has(image.id) && (\n            <Button onClick={() => handleAnalyze(image.url, image.id)}>Analyze Image</Button>\n          )}\n          {imageTags[image.id] && (\n            <TagContainer>\n              {imageTags[image.id].map((tag, index) => (\n                <TagButton key={index}>{tag}</TagButton>\n              ))}\n            </TagContainer>\n          )}\n          <StyledImage src={image.url} alt=\"Image\" />\n        </ImageContainer>\n      ))}\n    </Grid>\n  );\n};\n\nexport default ImageGrid;\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAYA,MAAM,OAAO,iIAAA,CAAA,UAAM,CAAC,GAAG,CAAC;;;;;;;;;;;AAWxB,CAAC;AAED,MAAM,iBAAiB,iIAAA,CAAA,UAAM,CAAC,GAAG,CAAC;;;;;;;;;;;;;AAalC,CAAC;AAED,MAAM,SAAS,iIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;;;;;;;;;;;;;;;AAe7B,CAAC;AAED,MAAM,eAAe,iIAAA,CAAA,UAAM,CAAC,GAAG,CAAC;;;;;;;;AAQhC,CAAC;AAED,MAAM,YAAY,iIAAA,CAAA,UAAM,CAAC,GAAG,CAAC;;;;;;AAM7B,CAAC;AAED,MAAM,cAAc,iIAAA,CAAA,UAAM,CAAC,GAAG,CAAC;;;;;AAK/B,CAAC;AAED,MAAM,YAA6B,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE;IACvD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAA+B,CAAC;IACzE,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAe,IAAI;IAEtE,MAAM,gBAAgB,OAAO,KAAa;QACxC,MAAM,OAAO,MAAM,UAAU,KAAK;QAClC,aAAa,CAAC,OAAS,CAAC;gBAAE,GAAG,IAAI;gBAAE,CAAC,GAAG,EAAE;YAAK,CAAC;QAC/C,kBAAkB,CAAC,OAAS,IAAI,IAAI,MAAM,GAAG,CAAC;IAChD;IAEA,qBACE,qKAAC;kBACE,OAAO,GAAG,CAAC,CAAC,sBACX,qKAAC;;oBACE,CAAC,eAAe,GAAG,CAAC,MAAM,EAAE,mBAC3B,qKAAC;wBAAO,SAAS,IAAM,cAAc,MAAM,GAAG,EAAE,MAAM,EAAE;kCAAG;;;;;;oBAE5D,SAAS,CAAC,MAAM,EAAE,CAAC,kBAClB,qKAAC;kCACE,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,sBAC7B,qKAAC;0CAAuB;+BAAR;;;;;;;;;;kCAItB,qKAAC;wBAAY,KAAK,MAAM,GAAG;wBAAE,KAAI;;;;;;;eAXd,MAAM,EAAE;;;;;;;;;;AAgBrC;uCAEe"}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file:///Users/darshan.he/temp/sam/frontend/src/styles/GlobalStyle.ts"],"sourcesContent":["// frontend/styles/GlobalStyle.ts\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: Arial, sans-serif;\n    background-color: #f9f9f9;\n  }\n`;\n\nexport default GlobalStyle;"],"names":[],"mappings":"AAAA,iCAAiC;;;;AACjC;;AAEA,MAAM,cAAc,iIAAA,CAAA,oBAAiB,CAAC;;;;;;AAMtC,CAAC;uCAEc"}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///Users/darshan.he/temp/sam/frontend/src/pages/index.tsx"],"sourcesContent":["// frontend/pages/index.tsx\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ImageGrid from '../components/ImageGrid';\nimport GlobalStyle from '../styles/GlobalStyle';\n\ninterface Image {\n  id: string;\n  url: string;\n}\n\nconst Home: React.FC = () => {\n  const [images, setImages] = useState<Image[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchImages = async () => {\n      try {\n        const response = await axios.get<Image[]>('http://localhost:5000/api/images');\n        setImages(response.data);\n      } catch (error) {\n        console.error('Error fetching images:', error);\n      }\n    };\n    fetchImages();\n  }, []);\n\n  const analyzeImage = async (url: string, id: string): Promise<string[]> => {\n    try {\n      setLoading(true);\n      const response = await axios.post<{ tags: string[] }>('http://localhost:5000/api/analyze', { url });\n      return response.data.tags;\n    } catch (error) {\n      console.error('Error analyzing image:', error);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <h1 style={{ textAlign: 'center', margin: '20px 0' }}>Image Tagging App</h1>\n      {loading && <p style={{ textAlign: 'center' }}>Analyzing...</p>}\n      <ImageGrid images={images} onAnalyze={analyzeImage} />\n    </>\n  );\n};\n\nexport default Home;\n"],"names":[],"mappings":"AAAA,2BAA2B;;;;;AAC3B;AACA;AACA;AACA;;;;;;;;;;AAOA,MAAM,OAAiB;IACrB,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAW,EAAE;IAChD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,cAAc;YAClB,IAAI;gBACF,MAAM,WAAW,MAAM,0GAAA,CAAA,UAAK,CAAC,GAAG,CAAU;gBAC1C,UAAU,SAAS,IAAI;YACzB,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,0BAA0B;YAC1C;QACF;QACA;IACF,GAAG,EAAE;IAEL,MAAM,eAAe,OAAO,KAAa;QACvC,IAAI;YACF,WAAW;YACX,MAAM,WAAW,MAAM,0GAAA,CAAA,UAAK,CAAC,IAAI,CAAqB,qCAAqC;gBAAE;YAAI;YACjG,OAAO,SAAS,IAAI,CAAC,IAAI;QAC3B,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,OAAO,EAAE;QACX,SAAU;YACR,WAAW;QACb;IACF;IAEA,qBACE;;0BACE,qKAAC,qHAAA,CAAA,UAAW;;;;;0BACZ,qKAAC;gBAAG,OAAO;oBAAE,WAAW;oBAAU,QAAQ;gBAAS;0BAAG;;;;;;YACrD,yBAAW,qKAAC;gBAAE,OAAO;oBAAE,WAAW;gBAAS;0BAAG;;;;;;0BAC/C,qKAAC,wHAAA,CAAA,UAAS;gBAAC,QAAQ;gBAAQ,WAAW;;;;;;;;AAG5C;uCAEe"}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}